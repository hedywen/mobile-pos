"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkpos"] = self["webpackChunkpos"] || []).push([["src_api_index_js-src_util_pos_js"],{

/***/ "./src/api/index.js":
/*!**************************!*\
  !*** ./src/api/index.js ***!
  \**************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"BindingSmsReq\": function() { return /* binding */ BindingSmsReq; },\n/* harmony export */   \"consumeSettle_query\": function() { return /* binding */ consumeSettle_query; },\n/* harmony export */   \"consume_query\": function() { return /* binding */ consume_query; },\n/* harmony export */   \"face_authenticate\": function() { return /* binding */ face_authenticate; },\n/* harmony export */   \"get_merchantInfo\": function() { return /* binding */ get_merchantInfo; },\n/* harmony export */   \"humanCard_compare\": function() { return /* binding */ humanCard_compare; },\n/* harmony export */   \"image_upload\": function() { return /* binding */ image_upload; },\n/* harmony export */   \"kxsdkGetInfo\": function() { return /* binding */ kxsdkGetInfo; },\n/* harmony export */   \"merchantInfo_add\": function() { return /* binding */ merchantInfo_add; },\n/* harmony export */   \"merchantInfo_verify\": function() { return /* binding */ merchantInfo_verify; },\n/* harmony export */   \"merchant_register\": function() { return /* binding */ merchant_register; },\n/* harmony export */   \"op_binding\": function() { return /* binding */ op_binding; },\n/* harmony export */   \"operator_add\": function() { return /* binding */ operator_add; },\n/* harmony export */   \"operator_delete\": function() { return /* binding */ operator_delete; },\n/* harmony export */   \"operator_query\": function() { return /* binding */ operator_query; },\n/* harmony export */   \"owner_binding\": function() { return /* binding */ owner_binding; },\n/* harmony export */   \"qPbocConsume_cancel\": function() { return /* binding */ qPbocConsume_cancel; },\n/* harmony export */   \"qPbocConsume_query\": function() { return /* binding */ qPbocConsume_query; },\n/* harmony export */   \"qPboc_consume\": function() { return /* binding */ qPboc_consume; },\n/* harmony export */   \"qrCode_scan\": function() { return /* binding */ qrCode_scan; },\n/* harmony export */   \"qrcodeConsume_cancel\": function() { return /* binding */ qrcodeConsume_cancel; },\n/* harmony export */   \"qrcodeConsume_query\": function() { return /* binding */ qrcodeConsume_query; },\n/* harmony export */   \"qrcode_builder\": function() { return /* binding */ qrcode_builder; },\n/* harmony export */   \"send_code\": function() { return /* binding */ send_code; },\n/* harmony export */   \"start_faceDetect\": function() { return /* binding */ start_faceDetect; },\n/* harmony export */   \"stop_faceDetect\": function() { return /* binding */ stop_faceDetect; },\n/* harmony export */   \"take_picture\": function() { return /* binding */ take_picture; },\n/* harmony export */   \"vibrates\": function() { return /* binding */ vibrates; }\n/* harmony export */ });\n// api封装\nconst request = (methodName, data, flag) => {\n  if (data && !flag) {\n    return new Promise((resolve, reject) => {\n      window.WebViewJavascriptBridge.callHandler(methodName, data, response => {\n        response = JSON.parse(response);\n\n        if (response.retcode == '0') {\n          resolve(response);\n        } else {\n          reject(response);\n        }\n      });\n    });\n  } else if (data && flag) {\n    window.WebViewJavascriptBridge.callHandler(methodName, data);\n  } else if (!data && flag) {\n    window.WebViewJavascriptBridge.callHandler(methodName);\n  }\n}; //绑定设备短信请求\n\n/*\r\n * @param acqInsCode 收单机构代码\r\n * @param merId 商户编号\r\n * @param phoneNo 手机号\r\n * @param expandcode 拓展机构代码\r\n */\n\n\nconst BindingSmsReq = data => request('merchantBindingSmsReq', data); //绑定主设备\n\n/*\r\n * @param userId App账号登录Id, 也可以是手机号\r\n * @param merId 商户编号\r\n */\n\nconst owner_binding = data => request('ownerBinding', data); //绑定子设备\n\n/*\r\n * @param userId App账号登录Id, 也可以是手机号\r\n * @param merId 商户编号\r\n */\n\nconst op_binding = data => request('opBinding', data); //刷脸签到\n\n/*\r\n */\n\nconst face_authenticate = data => request('authenticate', data); //刷脸收单开始\n\n/*\r\n */\n\nconst start_faceDetect = data => request('startFaceDetect', data); //刷脸收单停止\n\n/*\r\n */\n\nconst stop_faceDetect = data => request('stopFaceDetect', data); //身份证读取\n\nconst humanCard_compare = data => request('humanCardCompare', data); //唤起相册、相机\n\n/*\r\n * @param pictureType 图片类型\r\n */\n\nconst take_picture = data => request('takePicture', data, true); //短信验证码请求\n\n/*\r\n * @param phoneNo 手机号\r\n * @param expandcode 拓展机构代码\r\n */\n\nconst send_code = data => request('merchantRegisterSmsReq', data); //kxsdk_getInfo\n\n/*\r\n */\n\nconst kxsdkGetInfo = data => request('kxsdk_getInfo', data); //店员新增\n\n/*\r\n */\n\nconst operator_add = data => request('operatorAdd', data); //店员查询\n\n/*\r\n */\n\nconst operator_query = data => request('operatorQuery', data); //店员删除\n\n/*\r\n */\n\nconst operator_delete = data => request('operatorDelete', data); //实名认证\n\n/*\r\n * @param expandcode 拓展机构代码\r\n * @param accNo 卡号\r\n * @param customerNm 用户姓名\r\n * @param phoneNo 手机号\r\n * @param certifTp 证件类型(01 身份证, 02军官证, 03护照, 04回乡证, 05台胞证, 06警官证 ,07士兵证, 99其它证件)\r\n * @param certifId 证件号\r\n */\n\nconst merchantInfo_verify = data => request('merchantInfoVerify', data); //商户开通\n\n/*\r\n * @param userId App账号登录Id, 也可以是手机号\r\n * @param expandcode 拓展机构代码, 也可以是收单机构代码\r\n * @param phoneNo 手机号\r\n * @param mchntType 商户类别\r\n * @param merName 店铺名称, 最多12个汉字\r\n * @param merAbbr 店铺简称, 最多8个汉字\r\n * @param certifTp 证件类型(01 身份证, 02军官证, 03护照, 04回乡证, 05台胞证, 06警官证 ,07士兵证, 99其它证件)\r\n * @param certifId 证件号码\r\n * @param customerNm 姓名\r\n * @param accNo 卡号\r\n * @param cityCd 地区代码\r\n *\r\n * @param signature 报文摘要签名 （如果拓展机构不是收单App指定的拓展机构，就要上送）\r\n * @param smsCode 短信验证码 (如不验证身份或由商户后台发起身份验证，则无需smsCode&smsId；如由控件后台发起短信验证，则必填)\r\n * @param smsId 短信流水号 (同上)\r\n * @param expandName 拓展人员 (不填写为分公司默认拓展人员)\r\n * @param accType 账户类型 (1 个人账户，默认； 2 对公账户)\r\n * @param accName 户名 (如果账户类型为对公账户，则必填)\r\n */\n\nconst merchant_register = data => request('merchantRegister', data); //上传图片\n\n/*\r\n * @param merId 商户编号\r\n * @param imgs 图片编号，[1,2,3,...]\r\n */\n\nconst image_upload = data => request('uploadImages', data); //补充商户信息\n\n/*\r\n * @param merId 商户编号\r\n * @param expandcode 拓展机构代码\r\n *\r\n * @param certifPic1 身份证正面 (上传图片接口返回的imgId)；\r\n * @param certifPic2 身份证反面\r\n * @param certifPic3 手持身份证\r\n * @param licensePic 营业执照\r\n * @param shopPic1 店铺环境\r\n * @param shopPic2 店铺环境\r\n * @param shopPic3 店铺环境\r\n * @param shopPic4 店铺环境\r\n * @param shopPic5 店铺环境 （最多5张）\r\n */\n\nconst merchantInfo_add = data => request('merchantInfoAdd', data); //商户信息查询\n\n/*\r\n * @param {refresh:\"\"}\r\n */\n\nconst get_merchantInfo = data => request('getMerchantInfo', data); //交易流水查询\n\n/*\r\n * @param merId 商户编号\r\n * @param queryType 查询类型，“00”-正常记录；“01”-异常记录；（后续加上全部记录查询）\r\n * @param consumeDateStart 开始日期\r\n * @param consumeDateEnd 截止日期\r\n * @param pageNum 页码\r\n * @param pageSize 每页交易笔数\r\n */\n\nconst consume_query = data => request('consumeQuery', data); //交易总计查询\n\n/*\r\n *\r\n */\n\nconst consumeSettle_query = data => request('consumeSettleQuery', data); // 按键震动\n\nconst vibrates = () => request('vibrator', null, true); //商户主扫收款（商户扫描消费者二维码）\n\n/*\r\n * @param merId 商户编号\r\n * @param orderId 商户订单号\r\n * @param txnTime 订单发送时间 (YYYYMMDDhhmmss)\r\n * @param txnAmt 交易金额(单位为分，12位数字)\r\n */\n\nconst qrCode_scan = data => request('qrCodeScan', data); //商户被扫收款 (商户展示二维码)\n\n/*\r\n * @param merId 商户编号\r\n * @param orderId 商户订单号\r\n * @param txnTime 订单发送时间 (YYYYMMDDhhmmss)\r\n * @param txnAmt 交易金额(单位为分，12位数字)\r\n */\n\nconst qrcode_builder = data => request('qrcodeBuilder', data); //刷卡收款\n\n/*\r\n * @param merId 商户编号\r\n * @param orderId 商户订单号\r\n * @param txnTime 订单发送时间 (YYYYMMDDhhmmss)\r\n * @param txnAmt 交易金额(单位为分，12位数字)\r\n */\n\nconst qPboc_consume = data => request('qPbocConsume', data); //订单详情查询 - 刷卡\n\n/*\r\n * @param merId 商户编号\r\n * @param orderId 需要查询的订单号\r\n * @param txnTime 与消费时的订单生成时间一致\r\n */\n\nconst qPbocConsume_query = data => request('qPbocConsumeQuery', data); //订单详情查询 - 二维码\n\n/*\r\n * @param merId 商户编号\r\n * @param queryId 需要查询的交易流水号\r\n * @param orderId 开始日期\r\n * @param txnTime 截止日期\r\n *\r\n * 同被查询交易 orderId + txnTime 、queryId 二者必选其一\r\n */\n\nconst qrcodeConsume_query = data => request('qrcodeConsumeQuery', data); //刷卡消费撤销\n\n/*\r\n * data={}\r\n * @param merId 商户编号\r\n * @param orderId 商户订单号\r\n * @param origOrderId 原订单号\r\n * @param origQryId 原始交易流水号\r\n * @param origTxnTime 原订单发送时间\r\n * @param txnTime 订单发送时间\r\n * @param txnAmt 交易金额\r\n *\r\n */\n\nconst qPbocConsume_cancel = data => request('qPbocConsumeCancel', data); //二维码消费撤销\n\n/*\r\n * data = {}\r\n * @param merId 商户编号\r\n * @param orderId 商户订单号\r\n * @param origOrderId 原订单号\r\n * @param origQryId 原始交易流水号\r\n * @param origtxnTime 原订单发送时间\r\n * @param txnTime 订单发送时间\r\n * @param txnAmt 交易金额\r\n *\r\n */\n\nconst qrcodeConsume_cancel = data => request('qrcodeConsumeCancel', data);\n\n//# sourceURL=webpack://pos/./src/api/index.js?");

/***/ }),

/***/ "./src/util/pos.js":
/*!*************************!*\
  !*** ./src/util/pos.js ***!
  \*************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"accMul\": function() { return /* binding */ accMul; },\n/* harmony export */   \"deepClone\": function() { return /* binding */ deepClone; },\n/* harmony export */   \"famt\": function() { return /* binding */ famt; },\n/* harmony export */   \"fmoney\": function() { return /* binding */ fmoney; },\n/* harmony export */   \"fomatDate\": function() { return /* binding */ fomatDate; },\n/* harmony export */   \"ftime\": function() { return /* binding */ ftime; },\n/* harmony export */   \"getDay\": function() { return /* binding */ getDay; },\n/* harmony export */   \"getNowTime\": function() { return /* binding */ getNowTime; },\n/* harmony export */   \"randomNumber\": function() { return /* binding */ randomNumber; },\n/* harmony export */   \"showResMsg\": function() { return /* binding */ showResMsg; },\n/* harmony export */   \"valid_bankCard\": function() { return /* binding */ valid_bankCard; },\n/* harmony export */   \"valid_idCard\": function() { return /* binding */ valid_idCard; },\n/* harmony export */   \"valid_mobile\": function() { return /* binding */ valid_mobile; },\n/* harmony export */   \"valid_name\": function() { return /* binding */ valid_name; },\n/* harmony export */   \"valid_smsCode\": function() { return /* binding */ valid_smsCode; }\n/* harmony export */ });\nconst showResMsg = data => {\n  let code = data.retcode;\n  let temp;\n\n  if (code == \"CA0111\") {\n    temp = \"手机POS服务已被占用，请退出原有APP\";\n  } else if (code == \"CA0222\") {\n    temp = \"TA解密失败\";\n  } else if (code == \"CA0333\") {\n    temp = \"控件未初始化\";\n  } else if (code == \"0000012\") {\n    temp = \"鉴权失败，请重启程序\";\n  } else if (code == \"200064\") {\n    temp = \"卡上的余额不足\";\n  } else {\n    /*if(jsonData.retmsg && jsonData.retmsg != \"\"){\r\n        tip(jsonData.retmsg);\r\n    }*/\n    temp = \"\";\n  }\n\n  ;\n  return temp;\n}; // 格式化日期 （近几天）\n\n/**\r\n * @param number \r\n */\n\nconst getDay = num => {\n  // 格式化 个位数月日\n  const fn_fomat = data => {\n    return data.toString().length == 1 ? `0${data}` : data;\n  };\n\n  let today = new Date();\n  let targetday_milliseconds = today.getTime() + 1000 * 60 * 60 * 24 * num;\n  today.setTime(targetday_milliseconds); //注意，这行是关键代码\n\n  var tYear = today.getFullYear();\n  var tMonth = today.getMonth();\n  var tDate = today.getDate();\n  tMonth = fn_fomat(tMonth + 1);\n  tDate = fn_fomat(tDate);\n  return `${tYear}/${tMonth}/${tDate}`;\n}; // 格式化日期 \n\nconst fomatDate = date => {\n  let yyyy = date.getFullYear();\n  let MM = date.getMonth().toString().length === 1 ? `0${date.getMonth() + 1}` : date.getMonth() + 1;\n  let dd = date.getDate().toString().length === 1 ? `0${date.getDate()}` : date.getDate();\n  return `${yyyy}/${MM}/${dd}`;\n}; //格式化以分为单位的金额，保留两位小数\n\nconst fmoney = str => {\n  if (str == \"\") {\n    return \"0.00\";\n  } else {\n    str = \"\" + str;\n    var flag, len, result; // 校验入参格式\n\n    if (!/^-?\\d+$/.test(str)) {\n      throw \"fmoney:error param!(\" + str + \")\";\n    } // 判断是否有负号\n\n\n    flag = str[0] == \"-\";\n\n    if (flag) {\n      str = str.substring(1);\n    }\n\n    len = str.length;\n\n    if (len == 1) {\n      result = \"0.0\" + str;\n    } else if (len == 2) {\n      result = \"0.\" + str;\n    } else {\n      var part1, part2, ar;\n      part1 = str.substr(0, len - 2);\n      part2 = str.substr(len - 2, 2);\n\n      if (len < 6) {\n        result = part1 + \".\" + part2;\n      } else {\n        ar = part1.split(\"\"); // 倒插逗号\n\n        for (var i = ar.length - 3; i > 0; i -= 3) {\n          ar.splice(i, 0, \",\");\n        }\n\n        result = ar.join(\"\") + \".\" + part2;\n      }\n    } // 将负号添加回去\n\n\n    return (flag ? \"-\" : \"\") + result;\n  }\n}; // 数字前面补0\n\nconst famt = amt => {\n  let len = amt.length;\n  let _str = \"\";\n\n  if (len < 12) {\n    for (let i = 0; i < 12 - len; i++) {\n      _str += \"0\";\n    }\n\n    ;\n    return _str + amt;\n  }\n}; //乘法\n\nconst accMul = (arg1, arg2) => {\n  var m = 0,\n      s1 = arg1.toString(),\n      s2 = arg2.toString();\n\n  try {\n    m += s1.split(\".\")[1].length;\n  } catch (e) {}\n\n  try {\n    m += s2.split(\".\")[1].length;\n  } catch (e) {}\n\n  return Number(s1.replace(\".\", \"\")) * Number(s2.replace(\".\", \"\")) / Math.pow(10, m);\n}; //获取当前时间 yyyymmddhhmmss\n\nconst getNowTime = () => {\n  let now = new Date();\n  let y = now.getFullYear();\n  let m = now.getMonth() + 1;\n  let d = now.getDate();\n  m = m < 10 ? \"0\" + m : m;\n  d = d < 10 ? \"0\" + d : d;\n  return y + m + d + now.toString().split(\" \")[4].replace(/:/g, \"\");\n}; //格式化时间，20190321182724 == 》 2019-03-21 18:27:24\n\nconst ftime = timeStr => {\n  // 20190321182724\n  var day = timeStr.substring(0, 8);\n  var time = timeStr.substring(8);\n  day = day.substring(0, 4) + \"-\" + day.substring(4, 6) + \"-\" + day.substring(6);\n  time = time.substring(0, 2) + \":\" + time.substring(2, 4) + \":\" + time.substring(4);\n  return day + \" \" + time;\n}; // 获取任意范围内的随机数\n\nconst randomNumber = (Min, Max) => {\n  var Range = Max - Min;\n  var Rand = Math.random();\n  var num = Min + Math.round(Rand * Range); //四舍五入\n\n  return num;\n}; // deepClone\n\nconst deepClone = obj => {\n  if (obj == null || typeof obj !== 'object') return obj;\n  if (obj instanceof RegExp) return new RegExp(obj);\n  if (obj instanceof Date) return new Date(obj);\n  let newObj = new obj.constructor();\n\n  for (let key in obj) {\n    if (obj.hasOwnProperty(key)) {\n      newObj[key] = deepClone(obj[key]);\n    }\n  }\n\n  ;\n  return newObj;\n}; // ===================================== form validator start ==========================================\n\n/**\r\n * 汉字\r\n */\n\nconst valid_name = val => /^[\\u4e00-\\u9fa5-\\u2022]{2,20}$/.test(val);\n/**\r\n * 身份证\r\n */\n\nconst valid_idCard = val => {\n  var arrInt = [7, 9, 10, 5, 8, 4, 2, 1, 6, 3, 7, 9, 10, 5, 8, 4, 2];\n  var arrCh = ['1', '0', 'X', '9', '8', '7', '6', '5', '4', '3', '2'];\n  var nTemp = 0,\n      i;\n\n  if (val == \"\" || val.length != 18) {\n    return false;\n  }\n\n  for (i = 0; i < val.length - 1; i++) {\n    nTemp += val.substr(i, 1) * arrInt[i];\n  }\n\n  return val.substr(17, 1).toUpperCase() == arrCh[nTemp % 11] ? true : false;\n};\n/**\r\n * 银行卡号\r\n */\n\nconst valid_bankCard = val => /^([0-9]{16,20})$/.test(val);\n/**\r\n * 手机号\r\n */\n\nconst valid_mobile = val => /^(1[0-9]{10})$/.test(val);\n/**\r\n * 6位数字短信验证码\r\n */\n\nconst valid_smsCode = val => /\\d{6}/.test(val); // ===================================== form validator end ==========================================\n\n//# sourceURL=webpack://pos/./src/util/pos.js?");

/***/ })

}]);